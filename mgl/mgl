#!/bin/dash

# modules
#  class
#    README - first line short info
#    HELP - optional, additional displayed info
#

# Command matching

MGL_CMD=$2;
CTE=$1;
MGL_NAME=$3;
# Shift arguments if exist
[ -n "${1}" ] && shift;
[ -n "${1}" ] && shift;
[ -n "${1}" ] && shift;
MGL_OPTS="$*";

MGL_CLASS=$(echo ${CTE} | cut -f 1 -d ':');
MGL_TYPE=$(echo ${CTE} | cut -f 3 -d ':' -s | cut -f 1 -d '~');
MGL_TEMPLATE=$(echo ${CTE} | cut -f 3 -d ':' -s | cut -f 2 -d '~' -s);
MGL_TEMPLATE=${MGL_TEMPLATE:-generic};
MGL_TARGET=$(echo ${MGL_NAME} | sed -e 's:[^@]*@\(.*\):\1:g');
MGL_NAME=$(echo ${MGL_NAME} | cut -f 1 -d '@');

# Verify no special characters exist in important variables
echo "${MGL_CLASS}" | grep -E '^[a-zA-Z0-9_-]*$' > /dev/null 2>&1;
if [ $? -ne 0 ];
then
  echo "Class \"${MGL_CLASS}\" does not match character set [a-zA-Z0-9_-]*.";
  exit 1;
fi
echo "${MGL_TYPE}" | grep -E '^[a-zA-Z0-9_-]*$' > /dev/null 2>&1;
if [ $? -ne 0 ];
then
  echo "Type \"${MGL_TYPE}\" does not match character set [a-zA-Z0-9_-]*.";
  exit 1;
fi
echo "${MGL_CMD}" | grep -E '^[a-zA-A0-9_-]*$' > /dev/null 2>&1;
if [ $? -ne 0 ];
then
  echo "Command \"${MGL_CMD}\" does not match character set [a-zA-Z0-9_-]*.";
  exit 1;
fi

# Open fd3 for output
exec 3<&1

if [ -n "${MGL_DEBUG}" ];
then
  echo "---------------------------------";
  echo "MGL_CMD=${MGL_CMD}";
  echo "MGL_CLASS=${MGL_CLASS}";
  echo "MGL_TYPE=${MGL_TYPE}";
  echo "MGL_TEMPLATE=${MGL_TEMPLATE}";
  echo "MGL_NAME=${MGL_NAME}";
  echo "MGL_TARGET=${MGL_TARGET}";
  echo "MGL_OPTS=\"${MGL_OPTS}\"";
  echo "---------------------------------";
fi

export MGL_CMD;
export MGL_CLASS;
export MGL_TYPE;
export MGL_TEMPLATE;
export MGL_NAME;
export MGL_OPTS;

MGL_BASEDIR=${MGL_BASEDIR:-/var/lib/mgl/modules};

if [ -x "${MGL_BASEDIR}/${MGL_CLASS}/${MGL_TYPE}/generic" ];
then
  # Execution is done by /sourcing/ the file and then executing the right
  # methods
  # First  process the template

  export ${MGL_CLASS}_${MGL_TYPE}_${MGL_CMD}_prehooks=""
  export ${MGL_CLASS}_${MGL_TYPE}_${MGL_CMD}_posthooks=""

  if [ -n "${MGL_TEMPLATEDIR}" ];
  then
    if [ -x "${MGL_TEMPLATEDIR}/${MGL_CLASS}/${MGL_TYPE}/${MGL_CMD}" ];
    then
      . "${MGL_TEMPLATEDIR}/${MGL_CLASS}/${MGL_TYPE}/${MGL_CMD}";
    elif [ -x "${MGL_TEMPLATEDIR}/${MGL_CLASS}/${MGL_TYPE}/generic" ];
    then
      . "${MGL_TEMPLATEDIR}/${MGL_CLASS}/${MGL_TYPE}/generic";
    fi
  fi
  # Now source the main files
  if [ -x "${MGL_BASEDIR}/${MGL_CLASS}/${MGL_TYPE}/${MGL_CMD}" ];
  then
    . "${MGL_BASEDIR}/${MGL_CLASS}/${MGL_TYPE}/${MGL_CMD}";
  else
    . "${MGL_BASEDIR}/${MGL_CLASS}/${MGL_TYPE}/generic";
  fi
  # We call the methods in three stages:
  # <class>_<type>_<cmd>_check: 	prerequirement checks
  # <class>_<type>_<cmd>_execute	main method
  # <class>_<type>_<cmd>_final	finalize (validation etc.)
  # 
  # Each run first sees if there are hooks defined, like:
  # <class>_<type>_<cmd>_check_prehooks=""
  # <class>_<type>_<cmd>_check_posthooks=""
  # if prehooks exist, they are executed before the call itself.
  # if posthooks exist, they are executed after the call.
  RC=0;
  MAINEXECUTED=0;
  for METHOD in check execute final;
  do
    for PREHOOK in $(eval "echo \$${MGL_CLASS}_${MGL_TYPE}_${MGL_CMD}_${METHOD}_prehooks");
    do
      type ${PREHOOK} > /dev/null 2>&1;
      if [ $? -eq 0 ];
      then
        eval ${PREHOOK};
        RC=$?;
        [ ${RC} -ne 0 ] && exit ${RC};
      fi
    done
    type ${MGL_CLASS}_${MGL_TYPE}_${MGL_CMD}_${METHOD} > /dev/null 2>&1;
    if [ $? -eq 0 ];
    then
      eval ${MGL_CLASS}_${MGL_TYPE}_${MGL_CMD}_${METHOD};
      RC=$?;
      [ ${RC} -ne 0 ] && exit ${RC};
      if [ "${METHOD}" = "execute" ];
      then
        MAINEXECUTED=1;
      fi
    fi
    for POSTHOOK in $(eval "echo \$${MGL_CLASS}_${MGL_TYPE}_${MGL_CMD}_${METHOD}_posthooks");
    do
      type ${POSTHOOK} > /dev/null 2>&1;
      if [ $? -eq 0 ];
      then
        eval ${POSTHOOK};
        RC=$?;
        [ ${RC} -ne 0 ] && exit ${RC};
      fi
    done
  done
  if [ "${MAINEXECUTED}" = "0" ];
  then
    eval ${MGL_CLASS}_${MGL_TYPE}_help_execute;
    exit 1;
  fi
else
  # Check if we have special commands
  if [ "${MGL_CLASS}" = "help" ] && [ -z "${MGL_CMD}" ];
  then
    echo "Supported classes";
    echo "-----------------";
    for DIR in "${MGL_BASEDIR}"/*;
    do
      [ -d "${DIR}" ] || continue;
      CDIR=$(basename ${DIR});
      CEXP=$(head -1 ${DIR}/README 2>/dev/null);
      echo "  ${CDIR}	(${CEXP})"; 
    done
    exit 0;
  elif [ "${MGL_CMD}" = "help" ] && [ -z "${MGL_INSTANCE}" ] && [ -d "${MGL_BASEDIR}/${MGL_CLASS}" ];
  then
    echo "Supported types";
    echo "---------------";
    for DIR in "${MGL_BASEDIR}/${MGL_CLASS}"/*;
    do
      [ -d "${DIR}" ] || continue;
      CDIR=$(basename ${DIR});
      CEXP=$(head -1 ${DIR}/README 2>/dev/null);
      echo "  ${CDIR}	(${CEXP})";
    done
    if [ -f "${MGL_BASEDIR}/${MGL_CLASS}/HELP" ];
    then
      echo "";
      echo "Additional help"
      echo "---------------"
      strings "${MGL_BASEDIR}/${MGL_CLASS}/HELP";
    fi
  elif [ "${MGL_CMD}" = "" ];
  then
    echo "Manage Generic Linux v0.1";
    echo "";
    echo "Simplify high level commands easily.";
    echo "Run with \"help\" to get information about supported classes.";
    exit 0;
  else
    echo "!! File ${MGL_BASEDIR}/${MGL_CLASS}/${MGL_TYPE}/generic does not exist or is not executable.";
    echo "!! Perhaps you did not set \$MGL_BASEDIR (and \$MGL_TEMPLATEDIR)?";
    exit 1;
  fi
fi
