#!/bin/dash

[ -f "${MGL_BASEDIR}/${MGL_CLASS}/settings.conf" ] && . "${MGL_BASEDIR}/${MGL_CLASS}/settings.conf" || echo "settings.conf not found.";

if [ "${MGL_CMD}" = "help" ];
then
  echo "  create <name>               - Create a KVM instance";
  echo "  list                        - List defined instances";
  echo "  start <name>                - Start the KVM instance";
  echo "  connect <name>              - Connect to the KVM instance";
  echo "  delete <name>               - Delete the KVM instance";
  exit 0;
fi

#
# Parse MGL_OPTS (if applicable)
#
if [ -n "${MGL_OPTS}" ];
then
  for OPT in ${MGL_OPTS};
  do
    KEY=$(echo ${OPT} | cut -f 1 -d '=');
    VAL=$(echo ${OPT} | cut -f 2 -d '=');
    if [ "${KEY}" = "mem" ] || [ "${KEY}" = "memory" ];
    then
      MEM=${VAL}; # override MEM from settings.conf
    fi
  done
fi

#
# Create instances (images)
#
if [ "${MGL_CMD}" = "create" ];
then
  [ -z "${MGL_NAME}" ] && echo "!! No name provided." && exit 1;
  cd "${IMAGE_LOCATION}";
  if [ -f "${TARGET_LOCATION}/${MGL_NAME}.img" ];
  then
    echo "Instance ${MGL_NAME} already exists.";
    exit 1;
  fi
  cd "${TARGET_LOCATION}";
  BFILE="../${TEMPLATE_LOCATION}/${MGL_TEMPLATE}-base.img";
  if [ ! -f ${BFILE} ];
  then
    echo "!! Template \"${MGL_TEMPLATE}\" does not exist.";
    echo "!! Valid templates are:";
    for TEMPLATE in "../${TEMPLATE_LOCATION}/"*-base.img;
    do
      TEMPLATENAME=$(basename ${TEMPLATE} | sed -e 's:-base.img::g');
      echo "!!   - $(basename ${TEMPLATENAME})";
    done
  else
    echo ">> Creating ${MGL_NAME}.img based on ${MGL_TEMPLATE}-base.img:";
    OUTPUT=$(qemu-img create -f qcow2 -o backing_file=../${TEMPLATE_LOCATION}/${MGL_TEMPLATE}-base.img ${MGL_NAME}.img 2>&1);
    [ $? -ne 0 ] && echo "${OUTPUT}" && return 1;
    echo ">> Registering ${MGL_NAME} in hosts file";
    cd "${IMAGE_LOCATION}";
    VARLIST=$(grep -v ip4.internal hosts | cut -f 1 | awk -F':' '{print $NF}' | sed -e 's:40::g');
    VALUE=1;
    VALNUM=1;
    for NUM in `seq 1 100`;
    do
      VALUE=$(echo "obase=16; ${NUM}" | bc);
      VALNUM=${NUM};
      echo ${VARLIST} | grep -q ${VALUE};
      if [ $? -ne 0 ];
      then
        if [ ${VALUE} -lt 10 ];
	then
          VALUE="0${VALUE}";
	fi
        break; 
      fi
    done
    echo "2001:db8:81:e2:211:22ff:fe33:40${VALUE}	${MGL_NAME}.internal.genfic.com ${MGL_NAME}" >> hosts;
    echo "192.168.100.$((${NUM}+151))				${MGL_NAME}.ip4.internal.genfic.com ${MGL_NAME}_4" >> hosts;
    echo ">> Refreshing dnsmasq cache";
    sudo /usr/bin/pkill -SIGHUP dnsmasq
  fi
#
# Delete instances (images)
#
elif [ "${MGL_CMD}" = "delete" ];
then
  [ -z "${MGL_NAME}" ] && echo "!! No name provided." && exit 1;
  cd "${IMAGE_LOCATION}";
  if [ -f "${TARGET_LOCATION}/${MGL_NAME}.img" ];
  then
    APID=$(fuser "${TARGET_LOCATION}/${MGL_NAME}.img" 2> /dev/null);
    if [ $? -ne 0 ];
    then
      echo ">> Deleting ${MGL_NAME}.img";
      rm "${TARGET_LOCATION}/${MGL_NAME}.img";
      echo ">> Deregistering ${MGL_NAME} from hosts file";
      sed -i -e "/${MGL_NAME}.internal.genfic.com/d" -e "/${MGL_NAME}.ip4.internal.genfic.com/d" hosts
      echo ">> Refreshing dnsmasq cache"
      sudo /usr/bin/pkill -SIGHUP dnsmasq
    else
      echo "!! A process with PID ${APID} is still hanging on to ${MGL_NAME}.";
      exit 1;
    fi
  else
    echo "!! Image ${MGL_NAME}.img does not exist.";
    exit 1;
  fi
#
# List currently defined instances
#
elif [ "${MGL_CMD}" = "list" ];
then
  cd "${IMAGE_LOCATION}/${TARGET_LOCATION}";
  for IMG in *.img;
  do
    [ -f "${IMG}" ] || continue;
    INAME=$(echo ${IMG} | cut -f 1 -d '.');
    IPV4=$(grep ${INAME}.ip4.internal.genfic.com ${IMAGE_LOCATION}/hosts | cut -f 1);
    IPV6=$(grep ${INAME}.internal.genfic.com ${IMAGE_LOCATION}/hosts | cut -f 1);
    BASENUM=$(($(echo ${IPV6} | awk -F':' '{print $NF}') - 4000));
    VNC=$((${BASENUM} + 10));
    GDB=$((${BASENUM} + 1299));
    RUNNING="";
    fuser ${IMG} > /dev/null 2>&1;
    if [ $? -eq 0 ];
    then
      RUNNING="RUNNING";
    fi
    echo "  ${INAME}	- ${IPV4}	- ${IPV6}	(VNC: ${VNC}, GDB: ${GDB}) ${RUNNING}";
  done
#
# Start instance in the background (on a screen session)
#
elif [ "${MGL_CMD}" = "start" ];
then
  [ -z "${MGL_NAME}" ] && echo "!! No name provided." && exit 1;
  cd "${IMAGE_LOCATION}/${TARGET_LOCATION}";
  if [ ! -f ${MGL_NAME}.img ];
  then
    echo "!! Image ${MGL_NAME}.img does not exist.";
    exit 1;
  fi
  APID=$(fuser "${IMAGE_LOCATION}/${TARGET_LOCATION}/${MGL_NAME}.img" 2>/dev/null);
  if [ $? -eq 1 ];
  then
    # Not used yet, so let us start it
    IPV4=$(grep ${MGL_NAME}.ip4.internal.genfic.com "${IMAGE_LOCATION}/hosts" | cut -f 1);
    IPV6=$(grep ${MGL_NAME}.internal.genfic.com "${IMAGE_LOCATION}/hosts" | cut -f 1);
    BASENUM=$(($(echo ${IPV6} | awk -F':' '{print $NF}') - 4000));
    VNC=$((${BASENUM} + 10));
    GDB=$((${BASENUM} + 1299));
    BASEHEX=$(echo "obase=16;${BASENUM}" | bc);
    if [ ${BASENUM} -le 8 ];
    then
      BASEHEX="0${BASEHEX}";
    fi
    MAC="00:11:22:33:40:${BASEHEX}";
    echo ">> Launching ${MGL_NAME} instance as kvm-${MGL_NAME}"
    screen -S kvm-${MGL_NAME} -dm sh -c "${KVM} -monitor stdio -gdb tcp::${GDB} -vnc 127.0.0.1:${VNC} -net nic,model=virtio,macaddr=${MAC},vlan=0 -net vde,vlan=0 -drive file=${MGL_NAME}.img,if=virtio,cache=writeback -k ${KEYBOARD} -m ${MEM} -cpu ${CPU} -smp 2";
  else
    echo "!! Instance ${MGL_NAME} is already running (PID ${APID})";
    exit 1;
  fi
#
# Connect to an instance through VNC
#
elif [ "${MGL_CMD}" = "connect" ];
then
  [ -z "${MGL_NAME}" ] && echo "!! No name provided." && exit 1;
  cd "${IMAGE_LOCATION}/${TARGET_LOCATION}";
  if [ ! -f ${MGL_NAME}.img ];
  then
    echo "!! Image ${MGL_NAME}.img does not exist.";
    exit 1;
  fi
  fuser "${IMAGE_LOCATION}/${TARGET_LOCATION}/${MGL_NAME}.img" > /dev/null 2>&1;
  if [ $? -eq 0 ];
  then
    # Is running
    IPV6=$(grep ${MGL_NAME}.internal.genfic.com "${IMAGE_LOCATION}/hosts" | cut -f 1);
    BASENUM=$(($(echo ${IPV6} | awk -F':' '{print $NF}') - 4000));
    VNC=$((${BASENUM} + 10));
    echo ">>> Connecting to ${MGL_NAME} (vncviewer :${VNC})";
    vncviewer :${VNC};
  else
    # Is not running
    echo "!! Instance ${MGL_NAME} is not running.";
    exit 1;
  fi
fi
