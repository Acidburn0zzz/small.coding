#!/bin/sh

# Read in local settings (useful for debugging)
if [ -f ${HOME}/.mgl/${MGL_CLASS}/settings.conf ] ; then
  . "${HOME}/.mgl/${MGL_CLASS}/settings.conf"
elif [ -f "${MGL_BASEDIR}/${MGL_CLASS}/settings.conf" ] ; then
  . "${MGL_BASEDIR}/${MGL_CLASS}/settings.conf";
else
  echo "settings.conf not found.";
  exit 1;
fi

# keyval_set <filename> <key> <value>
#
# Sets the value of <key> in <filename>, creating a new <key>=<value> line if needed.
keyval_set() {
  local FILE="$1";
  local KEY="$2";
  local VALUE="$3";

  if [ ! -f $FILE ] ; then
    echo "${KEY}=${VALUE}" >> $FILE;
  else
    if grep -q "^$KEY *= *" $FILE ; then
      sed -c -i "s/^\($KEY *= *\).*/\1$VALUE/" $FILE
    else
      echo "${KEY}=${VALUE}" >> $FILE;
    fi
  fi
}

# keyval_get <filename> <key> [<default>]
#
# Get the value of <key> from <filename>, or return <default> if it does not exist
keyval_get() {
  local FILE="$1";
  local KEY="$2";
  local DEFAULT="$3";

  if [ ! -f $FILE ] ; then
    echo ${DEFAULT};
  else
    grep -q "^${KEY} *= *" $FILE ; 
    if [ $? -eq 0 ] ; then
      grep "^${KEY} *= *" $FILE | sed -e "s/^${KEY} *= *//" 
    else
      echo ${DEFAULT};
    fi
  fi
}

kvm_instance_help_execute() {
  echo "  create <name>               - Create a KVM instance";
  echo "        purpose=...		enable purpose.sh scripts (separated by + signs)"
  echo "  list                        - List defined instances";
  echo "  start <name>                - Start the KVM instance";
  echo "        mem=###	                boot with ### megabyte of memory";
  echo "        stdio                   disable vnc output, use stdin/out instead"
  echo "  connect <name>              - Connect to the KVM instance";
  echo "  ssh <name>		      - Use SSH to connect to the instance";
  echo "  sftp <name>		      - Use SFTP to connect to the instance";
  echo "  delete <name>               - Delete the KVM instance";
  return 0;
}

#
# Parse MGL_OPTS (if applicable)
#
if [ -n "${MGL_OPTS}" ];
then
  for OPT in ${MGL_OPTS};
  do
    KEY=$(echo ${OPT} | cut -f 1 -d '=');
    VAL=$(echo ${OPT} | cut -f 2 -d '=');
    if [ "${KEY}" = "mem" ] || [ "${KEY}" = "memory" ];
    then
      MEM=${VAL}; # override MEM from settings.conf
    fi
    if [ "${KEY}" = "stdio" ];
    then
      USE_VNC=0;
    fi
    if [ "${KEY}" = "purpose" ];
    then
      PURPOSE="${VAL}";
    fi
  done
fi

#
# Create instances (images)
#
kvm_instance_create_check() {
  [ -z "${MGL_NAME}" ] && echo "!! No name provided." && return 1;
  cd "${IMAGE_LOCATION}";
  if [ -f "${TARGET_LOCATION}/${MGL_NAME}.img" ];
  then
    echo "Instance ${MGL_NAME} already exists.";
    return 1;
  fi
  cd "${TARGET_LOCATION}";
  BFILE="../${TEMPLATE_LOCATION}/${MGL_TEMPLATE}-base.img";
  if [ ! -f ${BFILE} ];
  then
    echo "!! Template \"${MGL_TEMPLATE}\" does not exist.";
    echo "!! Valid templates are:";
    for TEMPLATE in "../${TEMPLATE_LOCATION}/"*-base.img;
    do
      TEMPLATENAME=$(basename ${TEMPLATE} | sed -e 's:-base.img::g');
      echo "!!   - $(basename ${TEMPLATENAME})";
    done
    return 2;
  fi
}

kvm_instance_create_execute() {
  echo ">> Creating ${MGL_NAME}.img based on ${MGL_TEMPLATE}-base.img:";

  #
  # The base location of the guest is a directory named after its hostname
  #
  mkdir -p ${MGL_NAME}.internal.genfic.local;
  OUTPUT=$(qemu-img create -f qcow2 -o backing_file=$(pwd)/../${TEMPLATE_LOCATION}/${MGL_TEMPLATE}-base.img ${MGL_NAME}.internal.genfic.local/rootfs.img 2>&1);
  [ $? -ne 0 ] && echo "${OUTPUT}" && return 1;

  #
  # Register the hostname for dnsmasq
  #
  echo ">> Registering ${MGL_NAME} in hosts file";
  cd "${IMAGE_LOCATION}";
  # Generating IPv6 address (part in ${VALUE}) and IPv4 address (part in ${NUM})
  VARLIST=$(grep -v ip4.internal hosts | cut -f 1 | awk -F':' '{print $NF}' | sed -e 's:40::g');
  VALUE=1;
  VALNUM=1;
  for NUM in `seq 1 100`;
  do
    VALUE=$(echo "obase=16; ${NUM}" | bc);
    VALNUM=${NUM};
    echo ${VARLIST} | grep -q ${VALUE};
    if [ $? -ne 0 ];
    then
      if [ ${VALUE} -lt 10 ];
      then
        VALUE="0${VALUE}";
      fi
      break; 
    fi
  done
  echo "2001:db8:81:e2:211:22ff:fe33:40${VALUE}	${MGL_NAME}.internal.genfic.local ${MGL_NAME}" >> hosts;
  echo "192.168.100.$((${NUM}+151))				${MGL_NAME}.ip4.internal.genfic.local ${MGL_NAME}_4" >> hosts;
  echo ">> Registering ${MGL_NAME} in dnsmasq-hosts file";
  # Set the MAC address
  MAC=""
  if [ ${NUM} -lt 16 ] ; then
    MAC="00:11:22:33:40:0$(echo "obase=16;${NUM}" | bc)";
  else
    MAC="00:11:22:33:40:$(echo "obase=16;${NUM}" | bc)";
  fi
  echo "${MAC},192.168.100.$((${NUM}+151)),${MGL_NAME},10m" >> dnsmasq-hosts;

  echo ">> Refreshing dnsmasq cache";
  sudo /usr/bin/pkill -SIGHUP dnsmasq
  if [ -n "${PURPOSE}" ] && [ -d "${MGL_PURPOSEDIR}" ];
  then
    echo ">> Creating links to specified purpose scripts";
    cd ${MGL_PURPOSEDIR}/hosts/ || return 1;
    [ ! -d ${MGL_NAME}.internal.genfic.local ] && mkdir -p ${MGL_NAME}.internal.genfic.local;
    cd ${MGL_NAME}.internal.genfic.local;
    for PURPOSESCRIPT in $(echo ${PURPOSE} | sed -e 's:+: :g');
    do
      [ -f ../../scripts/${PURPOSESCRIPT}.sh ] && ln -s ../../scripts/${PURPOSESCRIPT}.sh
      echo ">>   Added link to ${PURPOSESCRIPT}.sh";
    done
  fi

  #
  # Writing configuration file
  #
  echo ">> Writing configuration file";
  cd "${IMAGE_LOCATION}/${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local"
  keyval_set ro-settings.conf MAC_ADDRESS "${MAC}";
  keyval_set ro-settings.conf HOSTNAME "${MGL_NAME}";
  keyval_set ro-settings.conf DOMAINNAME "internal.genfic.local";
  keyval_set ro-settings.conf IP4ADDRESS "192.168.100.$((${NUM}+151))";
  keyval_set ro-settings.conf IP6ADDRESS "2001:db8:81:e2:211:22ff:fe33:40${VALUE}";
  keyval_set settings.conf GDB_PORT "$((${NUM}+1299))";
  keyval_set settings.conf VNC_PORT "$((${NUM}+10))";
  keyval_set settings.conf NET_PORTID $((${NUM}+1));
  keyval_set settings.conf MEMORY 1536;
  keyval_set settings.conf CPUCOUNT 2;
}

#
# Delete instances (images)
#
kvm_instance_delete_check() {
  [ -z "${MGL_NAME}" ] && echo "!! No name provided." && return 1;
  cd "${IMAGE_LOCATION}";
  if [ -f "${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local/rootfs.img" ];
  then
    APID=$(fuser "${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local/rootfs.img" 2> /dev/null);
    if [ $? -eq 0 ];
    then
      echo "!! A process with PID ${APID} is still hanging on to ${MGL_NAME}.";
      return 1;
    fi
  else
    echo "!! Image ${MGL_NAME}.internal.genfic.local/rootfs.img does not exist.";
    return 1;
  fi
}

kvm_instance_delete_execute() {
  cd "${IMAGE_LOCATION}";
  if [ -f "${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local/rootfs.img" ];
  then
    APID=$(fuser "${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local/rootfs.img" 2> /dev/null);
    if [ $? -ne 0 ];
    then
      echo ">> Deleting ${MGL_NAME} images";
      GUESTDIR="${IMAGE_LOCATION}/${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local";
      rm "${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local/"*.img;
      echo ">> Deregistering ${MGL_NAME} from dnsmasq-hosts file";
      # Get MAC address 
      MAC=$(keyval_get ${GUESTDIR}/ro-settings.conf MAC_ADDRESS);
      sed -i -e "/${MAC},/d" dnsmasq-hosts
      echo ">> Deregistering ${MGL_NAME} from hosts file";
      sed -i -e "/${MGL_NAME}.internal.genfic.local/d" -e "/${MGL_NAME}.ip4.internal.genfic.local/d" hosts
      echo ">> Refreshing dnsmasq cache"
      sudo /usr/bin/pkill -SIGHUP dnsmasq
      echo ">> Removing configuration files";
      rm ${GUESTDIR}/ro-settings.conf;
      rm ${GUESTDIR}/settings.conf;
    else
      echo "!! A process with PID ${APID} is still hanging on to ${MGL_NAME}.";
      return 1;
    fi
  else
    echo "!! Image ${MGL_NAME}.internal.genfic.local/rootfs.img does not exist.";
    return 1;
  fi
  if [ -d "${MGL_PURPOSEDIR}/hosts/${MGL_NAME}.internal.genfic.local" ];
  then
    cd "${MGL_PURPOSEDIR}/hosts/${MGL_NAME}.internal.genfic.local";
    for FILE in *.sh;
    do
      [ -f ${FILE} ] || break;
      echo ">> Removing purpose reference ${FILE}";
      rm ${FILE};
    done
    cd "${MGL_PURPOSEDIR}/hosts";
    rmdir ${MGL_NAME}.internal.genfic.local;
  fi
}


#
# List currently defined instances
#
kvm_instance_list_execute() {
  cd "${IMAGE_LOCATION}/${TARGET_LOCATION}";

  printf "%11s %2s %15s %35s  %3s %4s\n" hostname port "ip4 address" "ip6 address" vnc gdb;
  for IMG in *.internal.genfic.local/rootfs.img;
  do
    [ -f "${IMG}" ] || continue;
    INAME=$(echo ${IMG} | cut -f 1 -d '.');
    GUESTDIR="${IMAGE_LOCATION}/${TARGET_LOCATION}/${INAME}.internal.genfic.local";
    IPV4=$(keyval_get ${GUESTDIR}/ro-settings.conf IP4ADDRESS);
    IPV6=$(keyval_get ${GUESTDIR}/ro-settings.conf IP6ADDRESS);
    VNC=$(keyval_get ${GUESTDIR}/settings.conf VNC_PORT);
    GDB=$(keyval_get ${GUESTDIR}/settings.conf GDB_PORT);
    PORT=$(keyval_get ${GUESTDIR}/settings.conf NET_PORTID);
    RUNNING="";
    fuser ${IMG} > /dev/null 2>&1;
    if [ $? -eq 0 ];
    then
      RUNNING="RUNNING";
    fi
    printf "%11s %4s %15s %35s  %3s %4s (%7s)\n" ${INAME} ${PORT} ${IPV4} ${IPV6} ${VNC} ${GDB} ${RUNNING};
  done
}

#
# Start instance in the background (on a screen session)
#
kvm_instance_start_check() {
  [ -z "${MGL_NAME}" ] && echo "!! No name provided." && return 1;
  cd "${IMAGE_LOCATION}/${TARGET_LOCATION}";
  if [ ! -f ${MGL_NAME}.internal.genfic.local/rootfs.img ];
  then
    echo "!! Image ${MGL_NAME}.internal.genfic.local/rootfs.img does not exist.";
    return 1;
  fi
  APID=$(fuser "${IMAGE_LOCATION}/${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local/rootfs.img" 2>/dev/null);
  if [ $? -ne 1 ];
  then
    echo "!! Instance ${MGL_NAME} is already running (PID ${APID})";
    return 1;
  fi
}

kvm_instance_start_execute() {
  # Validation
  [ -z "${MGL_NAME}" ] && echo "!! No name provided." && return 1;
  cd "${IMAGE_LOCATION}/${TARGET_LOCATION}";
  if [ ! -f ${MGL_NAME}.internal.genfic.local/rootfs.img ];
  then
    echo "!! Image ${MGL_NAME}.internal.genfic.local/rootfs.img does not exist.";
    return 1;
  fi

  # Okay we can start - let's see if it is already in use
  APID=$(fuser "${IMAGE_LOCATION}/${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local/rootfs.img" 2>/dev/null);
  if [ $? -eq 1 ];
  then
    # Not used yet, so let us start it
    GUESTDIR="${IMAGE_LOCATION}/${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local";

    MAC="$(keyval_get ${GUESTDIR}/ro-settings.conf MAC_ADDRESS)";
    PORTID="$(keyval_get ${GUESTDIR}/settings.conf NET_PORTID 1)";
    GDB="$(keyval_get ${GUESTDIR}/settings.conf GDB_PORT 1299)";
    VNC="$(keyval_get ${GUESTDIR}/settings.conf VNC_PORT 10)";
    MEMORY="$(keyval_get ${GUESTDIR}/settings.conf MEMORY 1536)";
    CPUCOUNT="$(keyval_get ${GUESTDIR}/settings.conf CPUCOUNT 2)";
    CPUTYPE="$(keyval_get ${GUESTDIR}/settings.conf CPUTYPE kvm64)";

    ADDFS=""

    for FSIMAGE in $(ls ${MGL_NAME}.internal.genfic.local/*.img | grep -v rootfs.img) ; do
      ADDFS="${ADDFS} -drive file=${FSIMAGE},if=virtio,cache=writeback"
    done

    echo ">> Launching ${MGL_NAME} instance as kvm-${MGL_NAME}"
    CMDLINE="${KVM} -gdb tcp::${GDB} -netdev vde,id=${MGL_NAME},port=${PORTID} -device virtio-net-pci,netdev=${MGL_NAME},mac=${MAC} -drive file=${MGL_NAME}.internal.genfic.local/rootfs.img,if=virtio,cache=writeback ${ADDFS} -m ${MEMORY} -cpu ${CPU} -smp ${CPUCOUNT}";
    if [ -n "${KEYBOARD}" ] ; then
      CMDLINE="${CMDLINE} -k ${KEYBOARD}";
    fi
    if [ "${USE_VNC}" = "1" ];
    then
      #CMDLINE="${CMDLINE} -monitor stdio -vga qxl -spice port=${VNC},addr=127.0.0.1,disable-ticketing";
      CMDLINE="${CMDLINE} -monitor stdio -vnc 127.0.0.1:${VNC}";
    else
      CMDLINE="${CMDLINE} -curses";
    fi
    [ -n "${MGL_DEBUG}" ] && echo "### DEBUG: Executing ${CMDLINE}";
    if [ -n "${MGL_DEBUG}" ];
    then
      echo "### DEBUG: Output will be in mgl.log"; 
      screen -S kvm-${MGL_NAME} -dm sh -c "${CMDLINE} > mgl.log 2>&1";
    else
      screen -S kvm-${MGL_NAME} -dm sh -c "${CMDLINE}";
    fi
  else
    echo "!! Instance ${MGL_NAME} is already running (PID ${APID})";
    return 1;
  fi
}
#
# Connect to an instance through VNC
#
kvm_instance_connect_check() {
  [ -z "${MGL_NAME}" ] && echo "!! No name provided." && return 1;
  cd "${IMAGE_LOCATION}/${TARGET_LOCATION}";
  if [ ! -f ${MGL_NAME}.internal.genfic.local/rootfs.img ];
  then
    echo "!! Image ${MGL_NAME}.internal.genfic.local/rootfs.img does not exist.";
    return 1;
  fi
  fuser "${IMAGE_LOCATION}/${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local/rootfs.img" > /dev/null 2>&1;
  if [ $? -ne 0 ];
  then
    # Is not running
    echo "!! Instance ${MGL_NAME} is not running.";
    return 1;
  fi
}

kvm_instance_connect_execute() {
  [ -z "${MGL_NAME}" ] && echo "!! No name provided." && return 1;
  cd "${IMAGE_LOCATION}/${TARGET_LOCATION}";
  if [ ! -f ${MGL_NAME}.internal.genfic.local/rootfs.img ];
  then
    echo "!! Image ${MGL_NAME}.internal.genfic.local/rootfs.img does not exist.";
    return 1;
  fi
  fuser "${IMAGE_LOCATION}/${TARGET_LOCATION}/${MGL_NAME}.internal.genfic.local/rootfs.img" > /dev/null 2>&1;
  if [ $? -eq 0 ];
  then
    # Is running
    IPV6=$(grep ${MGL_NAME}.internal.genfic.local "${IMAGE_LOCATION}/hosts" | cut -f 1);
    BASENUM=$(($(echo ${IPV6} | awk -F':' '{print $NF}') - 4000));
    VNC=$((${BASENUM} + 10));
    echo ">>> Connecting to ${MGL_NAME} (VNC :${VNC})";
    vncviewer :${VNC};
  else
    # Is not running
    echo "!! Instance ${MGL_NAME} is not running.";
    return 1;
  fi
}

#
# Connect to the target through SSH
#
kvm_instance_ssh_execute() {
  [ -z "${MGL_NAME}" ] && echo "!! No username provided." && return 1;
  [ -z "${MGL_TARGET}" ] && echo "!! No targetname provided." && return 1;
  IPV4=$(grep ${MGL_TARGET}.ip4.internal.genfic.local "${IMAGE_LOCATION}/hosts" | cut -f 1);
  ssh ${MGL_NAME}@${IPV4};
}

#
# Connect to the target using SFTP
#
kvm_instance_sftp_execute() {
  [ -z "${MGL_NAME}" ] && echo "!! No username provided." && return 1;
  [ -z "${MGL_TARGET}" ] && echo "!! No targetname provided." && return 1;
  IPV4=$(grep ${MGL_TARGET}.ip4.internal.genfic.local "${IMAGE_LOCATION}/hosts" | cut -f 1);
  sftp ${MGL_NAME}@${IPV4};
}
