<?xml version="1.0" encoding="UTF-8"?>
<Benchmark xmlns="http://checklists.nist.gov/xccdf/1.1" xmlns:h="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Gentoo-Security-Benchmark-Kernel-1" xsi:schemaLocation="http://checklists.nist.gov/xccdf/1.1 xccdf-1.1.4.xsd" resolved="0">
  <status date="2012-07-19">draft</status>
  <title>Hardening Linux Kernel</title>
  <description>
    The Linux kernel is at the heart of every Linux system. With its extensive configuration
    options, it comes to no surprise that specific settings can be enabled to further harden
    your system.
    <h:br />
    <h:br />
    In this guide, we focus on Linux kernel configuration entries that support additional
    hardening of your system, as well as the configuration through the <h:em>syctl</h:em>
    settings.
  </description>
  <platform idref="cpe:/o:gentoo:linux"/>
  <version>1</version>
  <model system="urn:xccdf:scoring:default"/>
  <model system="urn:xccdf:scoring:flat"/>
  <Profile id="Default">
    <title>Default vanilla kernel hardening</title>
    <description>
      Profile matching all standard (vanilla-kernel) hardening rules
    </description>
    <select idref="rule-sysctl-ipv4-forward" selected="true" />
    <select idref="rule-sysctl-ipv4-all-rp_filter" selected="true" />
    <select idref="rule-sysctl-ipv4-default-rp_filter" selected="true" />
    <select idref="rule-sysctl-ipv4-all-asr" selected="true" />
    <select idref="rule-sysctl-ipv4-default-asr" selected="true" />
    <select idref="rule-sysctl-ipv4-all-aredirect" selected="true" />
    <select idref="rule-sysctl-ipv4-default-aredirect" selected="true" />
    <select idref="rule-sysctl-ipv4-echobroadcast" selected="true" />
    <select idref="rule-sysctl-icmpboguserror" selected="true" />
    <select idref="rule-sysctl-ipv4-all-logmartians" selected="true" />
    <select idref="rule-sysctl-ipv4-default-logmartians" selected="true" />
    <select idref="rule-sysctl-ipv4-tcpsyncookies" selected="true" />
    <select idref="rule-kernel-syncookies" selected="true" />
  </Profile>
  <Profile id="Full" extends="grSecurity">
    <title>grSecurity (incl. PaX) kernel hardening</title>
    <description>
      Profile matching the recommended PaX settings and grSecurity
      settings
    </description>
    <select idref="rule-kernel-grsec" selected="true" />
    <select idref="rule-kernel-grsec-pax" selected="true" />
    <select idref="rule-kernel-grsec-pax-noexec" selected="true" />
    <select idref="rule-kernel-grsec-pax-anyexec" selected="true" />
    <select idref="rule-kernel-grsec-pax-mprotect" selected="true" />
    <select idref="rule-kernel-grsec-pax-aslr" selected="true" />
    <select idref="rule-kernel-grsec-pax-randkstack" selected="true" />
    <select idref="rule-kernel-grsec-pax-randustack" selected="true" />
    <select idref="rule-kernel-grsec-pax-randmmap" selected="true" />
  </Profile>
  <Profile id="grSecurity" extends="Default">
    <title>grSecurity specific kernel hardening</title>
    <description>
      Profile matching the recommended grSecurity settings (except PaX)
    </description>
    <select idref="rule-kernel-grsec" selected="true" />
    <select idref="rule-kernel-tpe" selected="true" />
    <select idref="rule-kernel-grsec-proc" selected="true" />
    <select idref="rule-kernel-grsec-proc-user" selected="true" />
    <select idref="rule-kernel-grsec-proc-usergroup" selected="true" />
    <select idref="rule-kernel-grsec-proc-add" selected="true" />
    <select idref="rule-kernel-grsec-link" selected="true" />
    <select idref="rule-kernel-grsec-fifo" selected="true" />
    <select idref="rule-kernel-grsec-chroot" selected="true" />
    <select idref="rule-kernel-grsec-chroot-mount" selected="true" />
    <select idref="rule-kernel-grsec-chroot-double" selected="true" />
    <select idref="rule-kernel-grsec-chroot-pivot" selected="true" />
    <select idref="rule-kernel-grsec-chroot-chdir" selected="true" />
    <select idref="rule-kernel-grsec-chroot-chmod" selected="true" />
    <select idref="rule-kernel-grsec-chroot-fchdir" selected="true" />
    <select idref="rule-kernel-grsec-chroot-mknod" selected="true" />
    <select idref="rule-kernel-grsec-chroot-shmat" selected="true" />
    <select idref="rule-kernel-grsec-chroot-unix" selected="true" />
    <select idref="rule-kernel-grsec-chroot-findtask" selected="true" />
    <select idref="rule-kernel-grsec-chroot-nice" selected="true" />
    <select idref="rule-kernel-grsec-chroot-sysctl" selected="true" />
    <select idref="rule-kernel-grsec-chroot-caps" selected="true" />
  </Profile>
  <Group id="gt-kernelconfig">
    <title>Kernel Configuration</title>
    <description>
      The Linux kernel should be configured using a sane security standard in
      mind. When using grSecurity, additional security-enhancing settings can
      be enabled.
    </description>
    <reference href="http://www.gentoo.org/doc/en/kernel-config.xml#shorthand">Gentoo Kernel Configuration Guide - Shorthand notation information</reference>
    <Group id="gt-kernelconfig-grsec">
      <title>Use grSecurity</title>
      <description>
        grSecurity is a set of kernel patches that provides additional countermeasures
        against popular exploit methods and common vulnerabilities. Although the patchset
        is not part of the mainstream Linux kernel sources, Gentoo offers grSecurity through
        the <h:code>hardened-sources</h:code> kernel package.
      </description>
      <reference href="https://grsecurity.net">grSecurity Homepage</reference>
      <reference href="http://www.gentoo.org/proj/en/hardened/grsecurity.xml">Gentoo grSecurity v2 Guide</reference>
      <!-- @@GEN START rule-kernel-grsec -->
      <!-- @@GEN END rule-kernel-grsec -->
      <Group id="gt-kernelconfig-grsec-pax">
      <title>Use PaX</title>
      <description>
        With PaX, additional protection against memory corruption bugs and exploits
        is enabled. We recommend to enable the following settings:
        <h:ul>
        <h:li>
          <h:em>Use legacy ELF header marking</h:em> (CONFIG_PAX_EI_PAX) and
          <h:em>Use ELF program header marking</h:em> (CONFIG_PAX_PT_PAX_FLAGS) so that you can enable/disable
          PaX settings on a per-binary basis. 
        </h:li>
        <h:li>
          <h:em>Enforce non-executable pages</h:em> (CONFIG_PAX_NOEXEC) to disable allocation of
          memory that is both executable (contains runnable code) and writeable. Write- and executable
          pages are risky as it allows attackers to introduce code (through overflows or other methods) 
          in memory and then execute that code. However, the downside is that there are still applications
          (or drivers) that depend on RWX memory.
        </h:li>
        <h:li>
          <h:em>Segmentation based non-executable pages</h:em> (CONFIG_PAX_SEGMEXEC) or
          <h:em>Paging based non-executable pages</h:em> (CONFIG_PAX_PAGEEXEC) will support the
          non-executable pages through memory segmentation or paging rules. 
        </h:li>
        <h:li>
          <h:em>Emulate trampolines</h:em> (CONFIG_PAX_EMUTRAMP) if you are on x86_32 architecture (the option
          is not available for x86_64). This will enable emulation of trampolines (small bits of code in 
          non-executable memory pages) for those applications that you enable this on (which can be triggered
          through <h:b>chpax</h:b> or <h:b>paxctl</h:b>).
        </h:li>
        <h:li>
          <h:em>Restrict mprotect()</h:em> (CONFIG_PAX_MPROTECT) will restrict the use of <h:em>mprotect()</h:em>
          so that applications cannot switch the purpose of pages (executable vs non-executable and such) after
          creating them.
        </h:li>
        <h:li>
          <h:em>Address Space Layout Randomization</h:em> (CONFIG_PAX_ASLR) to introduce some randomization
          in the memory allocation so that attackers will find it much more difficult to guess the address
          of specific pages correctly.
        </h:li>
        <h:li>
          <h:em>Randomize kernel stack base</h:em> (CONFIG_PAX_RANDKSTACK) to randomize every task's kernel
          stack on each system call, making it more difficult to both guess locations as well as use leaked
          information from previous calls.
        </h:li>
        <h:li>
          <h:em>Randomize user stack base</h:em> (CONFIG_PAX_RANDUSTACK) to randomize every task's userland
          stack, providing similar protection as mentioned earlier but for user applications.
        </h:li>
        <h:li>
          <h:em>Randomize mmap() base</h:em> (CONFIG_PAX_RANDMMAP) to randomize the base address of
          mmap() requests (unless the requests specify an address themselves). This will cause dynamically
          loaded libraries to appear at random addresses.
        </h:li>
      </h:ul>
      </description>
      <!-- @@GEN START rule-kernel-grsec-pax -->
      <!-- @@GEN END rule-kernel-grsec-pax -->
      <!-- @@GEN START rule-kernel-grsec-pax-noexec -->
      <!-- @@GEN END rule-kernel-grsec-pax-noexec -->
      <!-- @@GEN START rule-kernel-grsec-pax-anyexec -->
      <!-- @@GEN END rule-kernel-grsec-pax-anyexec -->
      <!-- @@GEN START rule-kernel-grsec-pax-mprotect -->
      <!-- @@GEN END rule-kernel-grsec-pax-mprotect -->
      <!-- @@GEN START rule-kernel-grsec-pax-aslr -->
      <!-- @@GEN END rule-kernel-grsec-pax-aslr -->
      <!-- @@GEN START rule-kernel-grsec-pax-randkstack -->
      <!-- @@GEN END rule-kernel-grsec-pax-randkstack -->
      <!-- @@GEN START rule-kernel-grsec-pax-randustack -->
      <!-- @@GEN END rule-kernel-grsec-pax-randustack -->
      <!-- @@GEN START rule-kernel-grsec-pax-randmmap -->
      <!-- @@GEN END rule-kernel-grsec-pax-randmmap -->
    </Group>
    <Group id="gt-kernelconfig-grsec-filesystem">
      <title>Enable file system protection measures</title>
      <description>
        In the grSecurity patches, a set of additional protections are included to thwart information
        leakage as well as further limit chroot environments. We recommend to enable the following settings:
        <h:ul>
        <h:li>
          <h:em>Proc restrictions</h:em> (CONFIG_GRKERNSEC_PROC) so that the <h:code>/proc</h:code> file system
          will be altered to enhance privacy (prevent information leakage).
        </h:li>
        <h:li>
          <h:em>Restrict /proc to user only</h:em> (CONFIG_GRKERNSEC_PROC_USER) so that non-root users cannot 
          see processes of other users.
        </h:li>
        <h:li>
          <h:em>Allow special group</h:em> (CONFIG_GRKERNSEC_PROC_USERGROUP) so that the members of a specific
          group can see other users' processes and network-related information.
        </h:li>
        <h:li>
          <h:em>Additional restrictions</h:em> (CONFIG_GRKERNSEC_PROC_ADD) will prevent non-root users to
          see device information and memory information which can be (ab)used for exploit purposes.
        </h:li>
        <h:li>
          <h:em>Linking restrictions</h:em> (CONFIG_GRKERNSEC_LINK) will prevent users to follow
          symlinks that are owned by other users in world-writeable sticky directories such as <h:code>/tmp</h:code>
          (unless that user is the owner of that directory). This prevents a certain kind of race conditions.
        </h:li>
        <h:li>
          <h:em>FIFO restrictions</h:em> (CONFIG_GRKERNSEC_FIFO) will prevent users to write into 
          FIFOs in world-writeable sticky directories (like <h:code>/tmp</h:code> if they do not own
          these FIFOs themselves.
        </h:li>
        <h:li>
          <h:em>Chroot jail restrictions</h:em> (CONFIG_GRKERNSEC_CHROOT and all chroot-related options) to
          make the chroot jails more strict and less easy to break out from. 
        </h:li>
      </h:ul>
      </description>
      <!-- @@GEN START rule-kernel-grsec-proc -->
      <!-- @@GEN END rule-kernel-grsec-proc -->
      <!-- @@GEN START rule-kernel-grsec-proc-user -->
      <!-- @@GEN END rule-kernel-grsec-proc-user -->
      <!-- @@GEN START rule-kernel-grsec-proc-usergroup -->
      <!-- @@GEN END rule-kernel-grsec-proc-usergroup -->
      <!-- @@GEN START rule-kernel-grsec-proc-add -->
      <!-- @@GEN END rule-kernel-grsec-proc-add -->
      <!-- @@GEN START rule-kernel-grsec-link -->
      <!-- @@GEN END rule-kernel-grsec-link -->
      <!-- @@GEN START rule-kernel-grsec-fifo -->
      <!-- @@GEN END rule-kernel-grsec-fifo -->
      <!-- @@GEN START rule-kernel-grsec-chroot -->
      <!-- @@GEN END rule-kernel-grsec-chroot -->
      <!-- @@GEN START rule-kernel-grsec-chroot-mount -->
      <!-- @@GEN END rule-kernel-grsec-chroot-mount -->
      <!-- @@GEN START rule-kernel-grsec-chroot-double -->
      <!-- @@GEN END rule-kernel-grsec-chroot-double -->
      <!-- @@GEN START rule-kernel-grsec-chroot-pivot -->
      <!-- @@GEN END rule-kernel-grsec-chroot-pivot -->
      <!-- @@GEN START rule-kernel-grsec-chroot-chdir -->
      <!-- @@GEN END rule-kernel-grsec-chroot-chdir -->
      <!-- @@GEN START rule-kernel-grsec-chroot-chmod -->
      <!-- @@GEN END rule-kernel-grsec-chroot-chmod -->
      <!-- @@GEN START rule-kernel-grsec-chroot-fchdir -->
      <!-- @@GEN END rule-kernel-grsec-chroot-fchdir -->
      <!-- @@GEN START rule-kernel-grsec-chroot-mknod -->
      <!-- @@GEN END rule-kernel-grsec-chroot-mknod -->
      <!-- @@GEN START rule-kernel-grsec-chroot-shmat -->
      <!-- @@GEN END rule-kernel-grsec-chroot-shmat -->
      <!-- @@GEN START rule-kernel-grsec-chroot-unix -->
      <!-- @@GEN END rule-kernel-grsec-chroot-unix -->
      <!-- @@GEN START rule-kernel-grsec-chroot-findtask -->
      <!-- @@GEN END rule-kernel-grsec-chroot-findtask -->
      <!-- @@GEN START rule-kernel-grsec-chroot-nice -->
      <!-- @@GEN END rule-kernel-grsec-chroot-nice -->
      <!-- @@GEN START rule-kernel-grsec-chroot-sysctl -->
      <!-- @@GEN END rule-kernel-grsec-chroot-sysctl -->
      <!-- @@GEN START rule-kernel-grsec-chroot-caps -->
      <!-- @@GEN END rule-kernel-grsec-chroot-caps -->
    </Group>
    <Group id="gt-kernelconfig-grsec-tpe">
      <title>Enable Trusted Path Execution</title>
      <description>
        When using <h:code>sys-kernel/hardened-sources</h:code>, enable
        <h:code>CONFIG_GRKERNSEC_TPE</h:code>, which enabled <h:em>Trusted
        Path Execution</h:em>, a safety measure that ensures that, for a set
        of users, these users can only execute binaries and scripts from
        root-owned directories.
      </description>
      <reference href="http://www.gentoo.org/proj/en/hardened/grsec-tpe.xml">Gentoo Hardened grSecurity TPE Guide</reference>
      <!-- @@GEN START rule-kernel-tpe -->
      <!-- @@GEN END rule-kernel-tpe -->
    </Group>
  </Group>
  <Group id="gt-sysctl">
    <title>Kernel Tunables (Sysctl)</title>
    <description>
      The Linux kernel offers an interface, called <h:b>sysctl</h:b>,
      allowing to fine-tune kernel parameters (and even changing its
      behavior). Many parameters offered through sysctl allow an
      administrator to further strengthen his systems' security.
      <h:br />
      <h:br />
      To read and change sysctl parameters, you can use the
      <h:b>sysctl</h:b> command or the <h:code>/etc/sysctl.conf</h:code>
      file (which is used by the <h:code>sysctl</h:code> service (init
      script), part of the default boot process.
      <h:pre>### Using sysctl command to read and set variables ###
  # <h:b>sysctl net.ipv4.ip_forward</h:b>
  net.ipv4.ip_forward = 1
  # <h:b>sysctl -w net.ipv4.ip_forward=0</h:b></h:pre>
      The sysctl values can also be read through the
      <h:code>/proc/sys</h:code> file system.
    </description>
    <Group id="gt-sysctl-ipv4forward">
      <title>Disable IPv4 Forwarding</title>
      <description>
        The <h:code>net.ipv4.ip_forward</h:code> sysctl setting controls if
        IP forwarding is allowed or not on the system.
        <h:br />
        <h:br />
        Unless the system is used as a router or gateway, IPv4 forwarding
        should be disabled.
      </description>
        <!-- @@GEN START rule-sysctl-ipv4-forward -->
        <!-- @@GEN END rule-sysctl-ipv4-forward -->
    </Group>
    <Group id="gt-sysctl-sourceroute">
      <title>Enable Source Route Verification</title>
      <description>
        To offer additional protection against IP spoofing, enable source
        route verification on all interfaces. This is governed through the
        <h:code>net.ipv4.conf.*.rp_filter=1</h:code> setting.
          <h:br />
          <h:br />
          With source route verification, the Linux kernel validates that an IP
          package comes from the right interface. In other words, on a multi-homed
          system, packets that claim to be from your internal network on your external
          interface are dropped (and vice versa).
      </description>
      <!-- @@GEN START rule-sysctl-ipv4-all-rp_filter -->
      <!-- @@GEN END rule-sysctl-ipv4-all-rp_filter -->
      <!-- @@GEN START rule-sysctl-ipv4-default-rp_filter -->
      <!-- @@GEN END rule-sysctl-ipv4-default-rp_filter -->
    </Group>
    <Group id="gt-sysctl-ipsrcroute">
      <title>Disable IP Source Routing</title>
      <description>
        Disable IP source routing on all interfaces through the
        <h:code>net.ipv4.conf.*.accept_source_route=0</h:code> setting.
        <h:br />
        <h:br />
        IP source routing would allow a remote user (the sender) to specify
        the route that the package should take, rather than use the
        (default) routing tables used by the routers between the sender and
        the destination. This could be (ab)used to spoof IP addresses and still
        get the replies (rather than sending the replies to the real owner
        of the IP address).
      </description>
      <!-- @@GEN START rule-sysctl-ipv4-all-asr -->
      <!-- @@GEN END rule-sysctl-ipv4-all-asr -->
      <!-- @@GEN START rule-sysctl-ipv4-default-asr -->
      <!-- @@GEN END rule-sysctl-ipv4-default-asr -->
    </Group>
    <Group id="gt-sysctl-redirect">
      <title>Disable ICMP Redirects</title>
      <description>
        Set <h:code>net.ipv4.conf.*.accept_redirects=0</h:code> to disable
        ICMP redirect support on the interfaces.
        <h:br />
        <h:br />
        ICMP redirect messages are used by routers to inform hosts to use a
        different gateway than the one used. These packages should only be
        sent by the gateway of the system, but since you control that
        gateway and know when this gateway is changed, there is no point in
        allowing ICMP redirect messages on your system. After all, this would
          allow for "remote" updating of your routing table, which could allow
          an attacker to get all packets you want to send to the outside first
          (rather than the packets immediately going to the real gateway).
      </description>
      <!-- @@GEN START rule-sysctl-ipv4-all-aredirect -->
      <!-- @@GEN END rule-sysctl-ipv4-all-aredirect -->
      <!-- @@GEN START rule-sysctl-ipv4-default-aredirect -->
      <!-- @@GEN END rule-sysctl-ipv4-default-aredirect -->
    </Group>
    <Group id="gt-sysctl-echobroadcast">
      <title>Ignore ICMP Echo Broadcasts</title>
      <description>
        When <h:code>net.ipv4.icmp_echo_ignore_broadcasts=1</h:code> is set,
        then your system will not reply to broadcast 'ping' requests (a ping
        is an ICMP Echo request). Similar to hiding a WIFI SSID, this makes
        your system just a tiny bit more hidden from scanners.
      </description>
      <!-- @@GEN START rule-sysctl-ipv4-echobroadcast -->
      <!-- @@GEN END rule-sysctl-ipv4-echobroadcast -->
    </Group>
    <Group id="gt-sysctl-icmpboguserror">
    <title>Ignore ICMP Bogus Error Responses</title>
      <description>
        When an invalid response is given to broadcast frames (which occurs
        sometimes in erronous routers), the Linux kernel will by default log this
        event. To ensure that these (harmless) reports do not clutter your logs,
        you can disable this through <h:code>net.ipv4.icmp_ignore_bogus_error_responses</h:code>
        by setting it to 1.
      </description>
      <!-- @@GEN START rule-sysctl-icmpboguserror -->
      <!-- @@GEN END rule-sysctl-icmpboguserror -->
    </Group>
    <Group id="gt-sysctl-martians">
    <title>Enable Logging of Martians</title>
      <description>
        When you receive a packet that seemingly originates from a location where
        you have no route for, this package is dropped silently. You can enable logging
        of these packets (which are called <h:em>martians</h:em>) so that you at least
        are aware of them.
        <h:br />
        <h:br />
        Note that martians can only exist if you do not use a "default gateway", since
        a default gateway always matches (if no other route does) for any IP address.
        <h:br />
        <h:br />
        Logging of martians can be enabled through <h:code>net.ipv4.conf.*.log_martians=1</h:code>.
      </description>
      <!-- @@GEN START rule-sysctl-ipv4-all-logmartians -->
      <!-- @@GEN END rule-sysctl-ipv4-all-logmartians -->
      <!-- @@GEN START rule-sysctl-ipv4-default-logmartians -->
      <!-- @@GEN END rule-sysctl-ipv4-default-logmartians -->
    </Group>
    <Group id="gt-sysctl-tcpsyncookies">
      <title>Enable TCP SYN Cookie Protection</title>
        <description>
          One denial of service attack against a service would be to flood the server with SYN requests
          (the TCP package that starts a handshake for a connection). Such a flood can easily lead to a
          service disruption as connection state handling would consume a lot of resources in a small timeframe.
          <h:br />
          <h:br />
          By enabling <h:code>net.ipv4.tcp_syncookies</h:code>, the Linux kernel will change its handshake 
          behavior when its SYN backlog queue overflows: it replies to SYN requests with the appropriate
          SYN+ACK reply, but it does not store the connection in its backlog queue. Instead, it will only
          do that when it gets the ACK reply on his SYN+ACK. Based on the information in this reply, the 
          Linux kernel can then reconstruct the necessary information to generate an entry in the backlog
          queue.
          <h:br />
          <h:br />
          It should be noted that enabling TCP cookies is a last-resort. It changes the TCP stack behavior
          of the Linux kernel, violating TCP protocol and dropping support for certain TCP extensions whose
          information is only available in a SYN package.
          <h:br />
          <h:br />
          To enable TCP SYN cookie protection, enable <h:code>CONFIG_SYN_COOKIES</h:code> in the kernel, 
          set <h:code>net.ipv4.tcp_syncookies=1</h:code> and set proper values for <h:code>net.ipv4.tcp_max_syn_backlog</h:code>,
          <h:code>net.ipv4.tcp_synack_retries</h:code> and <h:code>net.ipv4.tcp_abort_on_overflow</h:code>.
        </description>
        <!-- @@GEN START rule-kernel-syncookies -->
        <!-- @@GEN END rule-kernel-syncookies -->
        <!-- @@GEN START rule-sysctl-ipv4-tcpsyncookies -->
        <!-- @@GEN END rule-sysctl-ipv4-tcpsyncookies -->
      </Group>
    </Group>
  </Group>
</Benchmark>
