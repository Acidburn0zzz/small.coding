--- refpolicy.orig/policy/modules/admin/portage.te	2010-08-03 15:11:03.000000000 +0200
+++ refpolicy/policy/modules/admin/portage.te	2011-07-23 21:55:55.962002969 +0200
@@ -1,14 +1,47 @@
-policy_module(portage, 1.10.0)
+policy_module(portage, 1.10.0.r1)
 
 ########################################
 #
 # Declarations
 #
 
+## <desc>
+## <p>
+##   Set dontaudit statements where Gentoo developers believe they are indeed
+##   cosmetic
+## </p>
+## </desc>
+gen_tunable(gentoo_try_dontaudit, false)
+
+## <desc>
+## <p>
+##   Allow the portage domains to use NFS mounts (regular nfs_t)
+## </p>
+## </desc>
+gen_tunable(gentoo_portage_use_nfs, false)
+
+## <desc>
+## <p>
+##   Enables rules that should not be necessary anymore when upstream updates or
+##   enhances their application(s).
+## </p>
+## </desc>
+gen_tunable(gentoo_wait_requests, true)
+
 type gcc_config_t;
 type gcc_config_exec_t;
 application_domain(gcc_config_t, gcc_config_exec_t)
 
+type layman_t;
+type layman_exec_t;
+application_domain(layman_t, layman_exec_t)
+
+type layman_var_lib_t;
+files_type(layman_var_lib_t)
+
+type layman_tmp_t;
+files_tmp_file(layman_tmp_t)
+
 # constraining type
 type portage_t;
 type portage_exec_t;
@@ -51,12 +84,22 @@
 type portage_log_t;
 logging_log_file(portage_log_t)
 
+type portage_srcrepo_t;
+files_type(portage_srcrepo_t)
+
 type portage_tmp_t;
 files_tmp_file(portage_tmp_t)
 
 type portage_tmpfs_t;
 files_tmpfs_file(portage_tmpfs_t)
 
+tunable_policy(`gentoo_portage_use_nfs',`
+	fs_getattr_nfs(portage_fetch_t)
+	fs_manage_nfs_dirs(portage_fetch_t)
+	fs_manage_nfs_files(portage_fetch_t)
+	fs_manage_nfs_symlinks(portage_fetch_t)
+')
+
 ########################################
 #
 # gcc-config policy
@@ -94,6 +137,8 @@
 
 # seems to be ok without this
 init_dontaudit_read_script_status_files(gcc_config_t)
+# Allow gcc-config to call rc (without transitioning)
+gentoo_init_rc_exec(gcc_config_t)
 
 libs_read_lib_files(gcc_config_t)
 libs_domtrans_ldconfig(gcc_config_t)
@@ -115,6 +160,55 @@
 
 ########################################
 #
+# Layman local policy
+#
+allow layman_t self:process signal;
+allow layman_t self:fifo_file rw_fifo_file_perms;
+
+# Manage layman var/lib files
+manage_files_pattern(layman_t, layman_var_lib_t, layman_var_lib_t)
+manage_dirs_pattern(layman_t, layman_var_lib_t, layman_var_lib_t)
+manage_lnk_files_pattern(layman_t, layman_var_lib_t, layman_var_lib_t)
+
+# Manage layman tmp files (needed in case of subversion)
+manage_dirs_pattern(layman_t, layman_tmp_t, layman_tmp_t)
+manage_files_pattern(layman_t, layman_tmp_t, layman_tmp_t)
+files_tmp_filetrans(layman_t, layman_tmp_t, { file dir })
+
+## Kernel layer calls
+#
+kernel_dontaudit_read_system_state(layman_t)
+kernel_dontaudit_request_load_module(layman_t)
+
+corecmd_exec_bin(layman_t)
+corecmd_exec_shell(layman_t)
+
+corenet_tcp_connect_generic_port(layman_t)
+corenet_tcp_connect_git_port(layman_t)
+corenet_tcp_connect_http_port(layman_t)
+corenet_tcp_connect_rsync_port(layman_t)
+
+domain_use_interactive_fds(layman_t)
+
+files_read_etc_files(layman_t)
+files_read_etc_runtime_files(layman_t)
+files_read_usr_files(layman_t)
+files_search_var_lib(layman_t)
+
+## System layer calls
+#
+logging_list_logs(layman_t)
+miscfiles_read_localization(layman_t)
+sysnet_dns_name_resolve(layman_t)
+userdom_dontaudit_list_user_home_dirs(layman_t)
+userdom_use_user_terminals(layman_t)
+
+## Other calls
+#
+rsync_exec(layman_t)
+
+########################################
+#
 # Portage Merging Rules
 #
 
@@ -122,7 +216,7 @@
 # - setexec to run portage fetch
 allow portage_t self:process { setfscreate setexec };
 # - kill for mysql merging, at least
-allow portage_t self:capability { sys_nice kill };
+allow portage_t self:capability { sys_nice kill setfcap };
 
 # user post-sync scripts
 can_exec(portage_t, portage_conf_t)
@@ -132,6 +226,8 @@
 
 allow portage_t { portage_fetch_t portage_sandbox_t }:process signal;
 
+logging_dontaudit_search_logs(portage_fetch_t)
+
 # transition for rsync and wget
 corecmd_shell_spec_domtrans(portage_t, portage_fetch_t)
 rsync_entry_domtrans(portage_t, portage_fetch_t)
@@ -145,6 +241,7 @@
 allow portage_sandbox_t portage_t:fd use;
 allow portage_sandbox_t portage_t:fifo_file rw_file_perms;
 allow portage_sandbox_t portage_t:process sigchld;
+allow portage_sandbox_t self:process ptrace;
 
 # run scripts out of the build directory
 can_exec(portage_t, portage_tmp_t)
@@ -173,11 +270,19 @@
 # if sesandbox is disabled, compiling is performed in this domain
 portage_compile_domain(portage_t)
 
+tunable_policy(`gentoo_try_dontaudit',`
+	dontaudit portage_t self:capability { dac_read_search };
+')
+
 optional_policy(`
 	bootloader_domtrans(portage_t)
 ')
 
 optional_policy(`
+	gpg_domtrans(portage_t)
+')
+
+optional_policy(`
 	modutils_domtrans_depmod(portage_t)
 	modutils_domtrans_update_mods(portage_t)
 	#dontaudit update_modules_t portage_tmp_t:dir search_dir_perms;
@@ -237,6 +342,11 @@
 # it occasionally comes up
 corenet_tcp_connect_all_reserved_ports(portage_fetch_t)
 corenet_tcp_connect_generic_port(portage_fetch_t)
+corenet_tcp_connect_http_cache_port(portage_fetch_t) # In case of cache server connections/proxy
+tunable_policy(`gentoo_wait_requests',`
+# Gentoo bug #375835 - Support transitioning to portage_fetch_t for binpkgs
+corenet_tcp_connect_http_cache_port(portage_t)
+')
 
 dev_dontaudit_read_rand(portage_fetch_t)
 
@@ -274,3 +384,11 @@
 	dontaudit portage_sandbox_t portage_cache_t:dir { setattr };
 	dontaudit portage_sandbox_t portage_cache_t:file { setattr write };
 ')
+
+tunable_policy(`gentoo_try_dontaudit',`
+	dontaudit portage_t self:netlink_route_socket { create };
+	dontaudit portage_t self:capability { dac_read_search };
+	dontaudit portage_fetch_t portage_devpts_t:chr_file { read write };
+	kernel_dontaudit_request_load_module(portage_t)
+')
+
--- refpolicy.orig/policy/modules/admin/portage.if	2010-08-05 14:46:44.000000000 +0200
+++ refpolicy/policy/modules/admin/portage.if	2011-07-23 20:26:07.997002655 +0200
@@ -16,6 +16,7 @@
 interface(`portage_domtrans',`
 	gen_require(`
 		type portage_t, portage_exec_t;
+		type layman_t, layman_exec_t;
 	')
 
 	files_search_usr($1)
@@ -23,6 +24,7 @@
 
 	# transition to portage
 	domtrans_pattern($1, portage_exec_t, portage_t)
+	domtrans_pattern($1, layman_exec_t, layman_t)
 ')
 
 ########################################
@@ -44,11 +46,11 @@
 #
 interface(`portage_run',`
 	gen_require(`
-		type portage_t, portage_fetch_t, portage_sandbox_t;
+		type portage_t, portage_fetch_t, portage_sandbox_t, layman_t;
 	')
 
 	portage_domtrans($1)
-	role $2 types { portage_t portage_fetch_t portage_sandbox_t };
+	role $2 types { portage_t portage_fetch_t portage_sandbox_t layman_t };
 ')
 
 ########################################
@@ -71,14 +73,14 @@
 
 	gen_require(`
 		class dbus send_msg;
-		type portage_devpts_t, portage_log_t, portage_tmp_t;
+		type portage_devpts_t, portage_log_t, portage_srcrepo_t, portage_tmp_t;
 		type portage_tmpfs_t;
 	')
 
 	allow $1 self:capability { fowner fsetid mknod setgid setuid chown dac_override net_raw };
 	dontaudit $1 self:capability sys_chroot;
 	allow $1 self:process { setpgid setsched setrlimit signal_perms execmem };
-	allow $1 self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
+	allow $1 self:process ~{ ptrace setcurrent setexec setrlimit execmem execstack execheap setfscreate };
 	allow $1 self:fd use;
 	allow $1 self:fifo_file rw_fifo_file_perms;
 	allow $1 self:shm create_shm_perms;
@@ -108,6 +110,11 @@
 	# run scripts out of the build directory
 	can_exec(portage_sandbox_t, portage_tmp_t)
 
+	# Support live ebuilds
+	manage_dirs_pattern($1, portage_srcrepo_t, portage_srcrepo_t)
+	manage_files_pattern($1, portage_srcrepo_t, portage_srcrepo_t)
+	manage_lnk_files_pattern($1, portage_srcrepo_t, portage_srcrepo_t)
+
 	manage_dirs_pattern($1, portage_tmp_t, portage_tmp_t)
 	manage_files_pattern($1, portage_tmp_t, portage_tmp_t)
 	manage_lnk_files_pattern($1, portage_tmp_t, portage_tmp_t)
@@ -188,6 +195,13 @@
 	# SELinux-enabled programs running in the sandbox
 	seutil_libselinux_linked($1)
 
+	tunable_policy(`gentoo_portage_use_nfs',`
+		fs_getattr_nfs($1)
+		fs_manage_nfs_dirs($1)
+		fs_manage_nfs_files($1)
+		fs_manage_nfs_symlinks($1)
+	')
+
 	ifdef(`TODO',`
 	# some gui ebuilds want to interact with X server, like xawtv
 	optional_policy(`
@@ -246,6 +260,24 @@
 
 ########################################
 ## <summary>
+##   Allow a domain search privileges through portage_conf_t
+## </summary>
+## <param name="domain">
+##	<summary>
+##	Domain to allow search privileges
+##	</summary>
+## </param>
+#
+interface(`gentoo_portage_search_conf',`
+	gen_require(`
+		type portage_conf_t;
+	')
+
+	allow $1 portage_conf_t:dir search_dir_perms;
+')
+
+########################################
+## <summary>
 ##	Do not audit attempts to search the
 ##	portage temporary directories.
 ## </summary>
@@ -265,6 +297,26 @@
 
 ########################################
 ## <summary>
+##   Allow a domain to read portage_tmp_t files
+## </summary>
+## <param name="domain">
+##	<summary>
+##	Domain to allow search privileges
+##	</summary>
+## </param>
+#
+interface(`gentoo_portage_read_tmp_files',`
+	gen_require(`
+		type portage_tmp_t;
+	')
+
+	allow $1 portage_tmp_t:dir search_dir_perms;
+	allow $1 portage_tmp_t:file read_file_perms;
+')
+
+
+########################################
+## <summary>
 ##	Do not audit attempts to read and write
 ##	the portage temporary files.
 ## </summary>
@@ -281,3 +333,48 @@
 
 	dontaudit $1 portage_tmp_t:file rw_file_perms;
 ')
+
+########################################
+## <summary>
+##	Do not audit attempts to inherit a
+##	portage file descriptor.
+## </summary>
+## <param name="domain">
+##	<summary>
+##	Domain to not audit.
+##	</summary>
+## </param>
+#
+interface(`gentoo_portage_dontaudit_use_fds',`
+	gen_require(`
+		type portage_t;
+	')
+
+	dontaudit $1 portage_t:fd use;
+')
+
+########################################
+## <summary>
+##   Allow the domain to run within an eselect module script. 
+## </summary>
+## <param name="domain">
+##	<summary>
+##	Domain to allow within an eselect module
+##	</summary>
+## </param>
+#   Specific to Gentoo,
+#   eselect modules allow users to switch between different flavors or versions
+#   of underlying components. In return, eselect makes a wrapper binary which 
+#   makes the proper selections. If this binary is different from bin_t, it might
+#   not hold the necessary privileges for the wrapper to function. However, just
+#   marking the target binaries doesn't always work, since for python scripts the
+#   wrapper doesn't execute it, but treats the target as a library.
+#
+interface(`gentoo_portage_eselect_module',`
+	gen_require(`
+		type portage_t;
+	')
+	allow $1 self:fifo_file { read write };
+	corecmd_exec_shell($1)	
+')
+
--- refpolicy.orig/policy/modules/admin/portage.fc	2010-08-03 15:11:03.000000000 +0200
+++ refpolicy/policy/modules/admin/portage.fc	2011-07-23 21:56:26.640002971 +0200
@@ -3,22 +3,30 @@
 /etc/portage(/.*)?			gen_context(system_u:object_r:portage_conf_t,s0)
 
 /usr/bin/gcc-config		--	gen_context(system_u:object_r:gcc_config_exec_t,s0)
+/usr/bin/layman			--	gen_context(system_u:object_r:layman_exec_t,s0)
 /usr/bin/sandbox		--	gen_context(system_u:object_r:portage_exec_t,s0)
 
 /usr/lib(64)?/portage/bin/ebuild --	gen_context(system_u:object_r:portage_exec_t,s0)
 /usr/lib(64)?/portage/bin/emerge --	gen_context(system_u:object_r:portage_exec_t,s0)
+/usr/lib(64)?/portage/bin/emerge-webrsync	--	gen_context(system_u:object_r:portage_exec_t,s0)
 /usr/lib(64)?/portage/bin/quickpkg --	gen_context(system_u:object_r:portage_exec_t,s0)
 /usr/lib(64)?/portage/bin/ebuild\.sh --	gen_context(system_u:object_r:portage_exec_t,s0)
 /usr/lib(64)?/portage/bin/regenworld --	gen_context(system_u:object_r:portage_exec_t,s0)
 /usr/lib(64)?/portage/bin/sandbox --	gen_context(system_u:object_r:portage_exec_t,s0)
 
 /usr/portage(/.*)?			gen_context(system_u:object_r:portage_ebuild_t,s0)
+/usr/portage/distfiles/svn-src(/.*)?	gen_context(system_u:object_r:portage_srcrepo_t,s0)
+/usr/portage/distfiles/git-src(/.*)?	gen_context(system_u:object_r:portage_srcrepo_t,s0)
+/usr/portage/distfiles/cvs-src(/.*)?	gen_context(system_u:object_r:portage_srcrepo_t,s0)
 
 /var/db/pkg(/.*)?			gen_context(system_u:object_r:portage_db_t,s0)
 /var/cache/edb(/.*)?			gen_context(system_u:object_r:portage_cache_t,s0)
 /var/log/emerge\.log.*		--	gen_context(system_u:object_r:portage_log_t,s0)
 /var/log/emerge-fetch.log	--	gen_context(system_u:object_r:portage_log_t,s0)
 /var/log/portage(/.*)?			gen_context(system_u:object_r:portage_log_t,s0)
+/var/lib/layman(/.*)?			gen_context(system_u:object_r:layman_var_lib_t,s0)
 /var/lib/portage(/.*)?			gen_context(system_u:object_r:portage_cache_t,s0)
+/var/tmp/binpkgs(/.*)?			gen_context(system_u:object_r:portage_tmp_t,s0)
+/var/tmp/emerge-webrsync(/.*)?		gen_context(system_u:object_r:portage_tmp_t,s0)
 /var/tmp/portage(/.*)?			gen_context(system_u:object_r:portage_tmp_t,s0)
 /var/tmp/portage-pkg(/.*)?		gen_context(system_u:object_r:portage_tmp_t,s0)
